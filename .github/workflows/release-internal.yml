# **what?**
# Release workflow provides the following steps:
# - checkout the given commit
# - validate version in sources and changelog file for given version
# - bump the version and generate a changelog if needed
# - merge all changes to the target branch if needed
# - run unit and integration tests against given commit
# - build and package that SHA
# - release it to internal repo
#
# **why?**
# Ensure an automated and tested release process
#
# **when?**
# This workflow can be run manually on demand or can be called by other workflows
name: Release internal patch

on:
  workflow_dispatch:
    inputs:
      version_number:
        description: "The release version number (i.e. 1.0.0b1)"
        type: string
        required: true
      test_run:
        description: "Test run (Publish release as draft)"
        type: boolean
        default: true
        required: false
      package_test_command:
        description: "Package test command"
        type: string
        default: "python -c \"import dbt.adapters.redshift\""
        required: true
  workflow_call:
    inputs:
      version_number:
        description: "The release version number (i.e. 1.0.0b1)"
        type: string
        required: true
      test_run:
        description: "Test run (Publish release as draft)"
        type: boolean
        default: true
        required: false
      package_test_command:
        description: "Package test command"
        type: string
        default: "python -c \"import dbt.adapters.redshift\""
        required: true

defaults:
  run:
    shell: bash

env:
  PYTHON_TARGET_VERSION: 3.8

jobs:
  job-setup:
    name: Job Setup
    runs-on: ubuntu-latest
    outputs:
      main_sha: ${{ steps.set_sha.outputs.main_sha }}
    steps:
      - name: "[DEBUG] Print Variables"
        run: |
          echo The release version number:         ${{ inputs.version_number }}
          echo Package test command:               ${{ inputs.package_test_command }}

      - name: "Checkout main branch"
        uses: actions/checkout@v4
        with:
          ref: main

      # Will be the last sha on the main branch
      - name: "Capture sha"
        id: set_sha
        run: |
          echo "main_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

  create-internal-release:
    runs-on: ubuntu-latest
    needs: [job-setup]

    steps:
      - name: "Checkout Commit - ${{ needs.job-setup.outputs.main_sha }}"
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          ref: ${{ needs.job-setup.outputs.main_sha }}

      - name: "Set up Python - ${{ env.PYTHON_TARGET_VERSION }}"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_TARGET_VERSION }}

      - name: "Install Python Dependencies"
        run: |
          python -m pip install --user --upgrade pip
          python -m pip install --upgrade setuptools wheel twine check-wheel-contents
          python -m pip --version

      - name: "Build Distributions - scripts/build-dist.sh"
        run: scripts/build-dist.sh

      - name: "[DEBUG] Show Distributions"
        run: ls -lh dist/

      - name: "Check Distribution Descriptions"
        run: |
          twine check dist/*

      - name: "[DEBUG] Check Wheel Contents"
        run: |
          check-wheel-contents dist/*.whl --ignore W007,W008

  internal-release:
    name: Internal Archive Release
    if: ${{ !failure() && !cancelled() }}

    needs: [create-internal-release]

    steps:
      - name: "Configure AWS profile for upload"
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} --profile ${{ secrets.AWS_PROFILE_NAME }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} --profile ${{ secrets.AWS_PROFILE_NAME }}
          aws configure set region ${{ secrets.AWS_REGION }} --profile ${{ secrets.AWS_PROFILE_NAME }}
          aws configure set output text --profile ${{ secrets.AWS_PROFILE_NAME }}

      # TODO: get more clever with renaming the release according to the internal number scheme
      # Grab existing latest release name
      # Grab the build number
      # Upticking by one for current sha
      # Rename wheel and tar.gz
      # Name current release using that upticked version <major>.<minor>.<release>b<beta number>+<build no.>

      - name: "Upload Build Artifact - ${{ inputs.version_number }}"
        run: |
          aws codeartifact login --tool twine --repository ${{ secrets.AWS_REPOSITORY }} --domain ${{ secrets.AWS_DOMAIN }} --domain-owner ${{ secrets.AWS_DOMAIN_OWNER }} --region ${{ secrets.AWS_REGION }} --profile ${{ secrets.AWS_PROFILE_NAME }}
          twine upload --repository codeartifact dist/*
          echo "-- Success -- released ${{ inputs.version_number }}"
